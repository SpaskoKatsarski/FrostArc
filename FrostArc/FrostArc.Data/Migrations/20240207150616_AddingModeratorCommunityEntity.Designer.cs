// <auto-generated />
using System;
using FrostArc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FrostArc.Data.Migrations
{
    [DbContext(typeof(FrostArcDbContext))]
    [Migration("20240207150616_AddingModeratorCommunityEntity")]
    partial class AddingModeratorCommunityEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserCommunity", b =>
                {
                    b.Property<Guid>("CommunitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommunitiesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserCommunity");
                });

            modelBuilder.Entity("FrostArc.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValue("https://cdn-icons-png.flaticon.com/512/1053/1053244.png");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d4e4af5-2ed4-43bb-a23c-153598b15ce8",
                            DisplayName = "SyncK",
                            Email = "spasko@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SPASKO@ABV.BG",
                            NormalizedUserName = "SPASKO@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKdyROSgLZ4rPTasOv2T+TNYgQszXd8vtHkXrkHtZBpDP3VCcfT6+LDiTKwpMQhIHw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cdn-icons-png.flaticon.com/512/1053/1053244.png",
                            SecurityStamp = "1BC726483DA146C7AB96961EBD8FA88B",
                            TwoFactorEnabled = false,
                            UserName = "spasko@abv.bg"
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f37eedfe-96ed-4448-a0de-48392e7ae50d"),
                            Description = "A community for Diablo 3 enthusiasts.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/8/80/Diablo_III_cover.png",
                            IsDeleted = false,
                            Name = "Diablo 3",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("a10c0f03-7cf2-4128-b74a-5f324d8d1027"),
                            Description = "A community for fans of The Witcher series.",
                            ImageUrl = "https://image.api.playstation.com/vulcan/ap/rnd/202211/0711/kh4MUIuMmHlktOHar3lVl6rY.png",
                            IsDeleted = false,
                            Name = "The Witcher Series",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("73a36f6e-9f3d-420b-bcb6-63c3980d9e98"),
                            Description = "A gathering spot for Call of Duty players.",
                            ImageUrl = "https://www.callofduty.com/content/dam/atvi/callofduty/cod-touchui/mw2/home/reveal/new-era/new_era-mw2.jpg",
                            IsDeleted = false,
                            Name = "Call of Duty",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("1177b3c1-0f40-471a-99fa-6f00fef2e672"),
                            Description = "Community for League of Legends players and enthusiasts.",
                            ImageUrl = "https://cdn1.epicgames.com/offer/24b9b5e323bc40eea252a10cdd3b2f10/EGS_LeagueofLegends_RiotGames_S1_2560x1440-872a966297484acd0efe49f34edd5aed",
                            IsDeleted = false,
                            Name = "League of Legends",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("c52fa30e-027a-471f-9839-a8fdea12562c"),
                            Description = "For fans of the Elder Scrolls series.",
                            ImageUrl = "https://esosslfiles-a.akamaihd.net/cms/2021/11/f5059a45d236626bd8ba7433c488bbe7.jpg",
                            IsDeleted = false,
                            Name = "Elder Scrolls",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("9a7fba4c-ff70-4f3f-a17e-d6369cbf1974"),
                            Description = "A community dedicated to the challenging world of Dark Souls.",
                            ImageUrl = "https://media.wired.co.uk/photos/606db938d051e15de128ccb1/4:3/w_2876,h_2157,c_limit/crop.jpg",
                            IsDeleted = false,
                            Name = "Dark Souls",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("4c770262-3889-4ef3-9899-c1d97f3ae8dc"),
                            Description = "Fans of the Assassin's Creed series unite here.",
                            ImageUrl = "https://staticctf.ubisoft.com/J3yJr34U2pZ2Ieem48Dwy9uqj5PNUQTn/449BBgnc3Q1ha2IN9rh3bR/e1077125021162ce2d59820739c316e7/ACEC_Keyart_00_00_00_mobile.jpg",
                            IsDeleted = false,
                            Name = "Assassin's Creed",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("a7eb244f-6e4a-45b6-9b6f-6b16feda05d9"),
                            Description = "A hub for Dota 2 players of all levels.",
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota2_social.jpg",
                            IsDeleted = false,
                            Name = "Dota 2",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("5d10d6d7-6223-482a-a98c-2ab4a3c4cfe2"),
                            Description = "A community for lovers of the Final Fantasy series.",
                            ImageUrl = "https://fyre.cdn.sewest.net/ffvii-hub/6471442498774a5fd66555de/pub106_cloud_zack_sephiroth-3-1--ga4rX0dsG.jpg?quality=85&width=3840",
                            IsDeleted = false,
                            Name = "Final Fantasy",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("5ad3fedc-4a19-4915-b59d-f7d385277d06"),
                            Description = "A place for Overwatch players and fans.",
                            ImageUrl = "https://media.wired.com/photos/642c752dc18cf0c5f132190d/master/pass/Overwatch-2-Lifeweaver-Gear.jpg",
                            IsDeleted = false,
                            Name = "Overwatch",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        },
                        new
                        {
                            Id = new Guid("6cde4016-6159-4ff9-8581-b0de4e1a7dc5"),
                            Description = "Community for enthusiasts of the Grand Theft Auto series.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/a/a5/Grand_Theft_Auto_V.png",
                            IsDeleted = false,
                            Name = "Grand Theft Auto",
                            OwnerId = new Guid("3e6fad8c-8b75-45fa-b6ed-12027466320a")
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Description = "Polish video game developer known for The Witcher series.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/thumb/6/68/CD_Projekt_logo.svg/1200px-CD_Projekt_logo.svg.png",
                            IsDeleted = false,
                            Name = "CD Projekt Red"
                        },
                        new
                        {
                            Id = new Guid("2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f"),
                            Description = "American video game developer, creator of the Call of Duty series.",
                            ImageUrl = "https://static.wikia.nocookie.net/cod_esports_gamepedia_en/images/d/d7/Infinty_Ward_logo.png/revision/latest?cb=20200707211638",
                            IsDeleted = false,
                            Name = "Infinity Ward"
                        },
                        new
                        {
                            Id = new Guid("3d4e5f6a-7b8c-9d0e-1f2a-3b4c5d6e7f8a"),
                            Description = "American video game developer known for League of Legends.",
                            ImageUrl = "https://www.riotgames.com/darkroom/800/87521fcaeca5867538ae7f46ac152740:2f8144e17957078916e41d2410c111c3/002-rg-2021-full-lockup-offwhite.jpg",
                            IsDeleted = false,
                            Name = "Riot Games"
                        },
                        new
                        {
                            Id = new Guid("4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b"),
                            Description = "American video game developer, famous for the Elder Scrolls series.",
                            ImageUrl = "https://images.ctfassets.net/rporu91m20dc/4gNvwblcIUQMAa0QWakgAk/64625a987bad1812862748367703938b/BGS_LargeHero_Future.jpg",
                            IsDeleted = false,
                            Name = "Bethesda Game Studios"
                        },
                        new
                        {
                            Id = new Guid("5f6a7b8c-9d0e-1f2a-3b4c-5d6e7f8a9b0c"),
                            Description = "Japanese video game development company, renowned for the Dark Souls series.",
                            ImageUrl = "https://static.wikia.nocookie.net/sony-playstation/images/f/fe/FromSoftware_logo_black_background.png/revision/latest?cb=20220901192200",
                            IsDeleted = false,
                            Name = "FromSoftware"
                        },
                        new
                        {
                            Id = new Guid("6a7b8c9d-0e1f-2a3b-4c5d-6e7f8a9b0c1d"),
                            Description = "French video game company, known for creating the Assassin's Creed series.",
                            ImageUrl = "https://staticctf.akamaized.net/J3yJr34U2pZ2Ieem48Dwy9uqj5PNUQTn/3h4s0GE47IBDxheVyJkfuX/e854163c0246c91bd79f390e9414391e/ubisoft_logo_whiteonblack_960x540_351175.jpg",
                            IsDeleted = false,
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e"),
                            Description = "American video game developer, publisher and digital distribution company, known for Dota 2.",
                            ImageUrl = "https://pbs.twimg.com/profile_images/1196563043150204928/X6pfa2YZ_400x400.jpg",
                            IsDeleted = false,
                            Name = "Valve Corporation"
                        },
                        new
                        {
                            Id = new Guid("8c9d0e1f-2a3b-4c5d-6e7f-8a9b0c1d2e3f"),
                            Description = "Japanese video game developer, publisher, and distribution company, famous for the Final Fantasy series.",
                            ImageUrl = "https://www.hd.square-enix.com/eng/assets/img/og/ogp_square-enix.png",
                            IsDeleted = false,
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = new Guid("9d0e1f2a-3b4c-5d6e-7f8a-9b0c1d2e3f4a"),
                            Description = "American video game developer and publisher, known for Overwatch.",
                            ImageUrl = "https://blz-contentstack-images.akamaized.net/v3/assets/blta8f9a8e092360c6c/bltbe1a42777abcc0da/620d1898a38b0106946f17d2/thumbnail-home.jpg",
                            IsDeleted = false,
                            Name = "Blizzard Entertainment"
                        },
                        new
                        {
                            Id = new Guid("0e1f2a3b-4c5d-6e7f-8a9b-0c1d2e3f4a5b"),
                            Description = "American video game publisher, famous for the Grand Theft Auto series.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Rockstar_Games_Logo.svg/1200px-Rockstar_Games_Logo.svg.png",
                            IsDeleted = false,
                            Name = "Rockstar Games"
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("GenreId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32bb0d8c-9d51-400b-b4a8-e3f8fe704af0"),
                            Description = "An open-world RPG set in a gritty fantasy universe.",
                            DeveloperId = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            GenreId = 3,
                            ImageUrl = "https://image.api.playstation.com/vulcan/ap/rnd/202211/0711/kh4MUIuMmHlktOHar3lVl6rY.png",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witcher 3: Wild Hunt"
                        },
                        new
                        {
                            Id = new Guid("006ac6dc-26d9-4524-a5d1-ed1f4a1b6a04"),
                            Description = "A first-person shooter with intense campaigns and multiplayer modes.",
                            DeveloperId = new Guid("2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f"),
                            GenreId = 9,
                            ImageUrl = "https://image.api.playstation.com/cdn/EP0002/CUSA05379_00/iTxbX14rj7Qhk3zYc6bnmDiuXMIK2UUW.png",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2019, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Call of Duty: Modern Warfare"
                        },
                        new
                        {
                            Id = new Guid("1a7db5c2-a562-4828-bc20-84c6021a5623"),
                            Description = "A highly popular multiplayer online battle arena game.",
                            DeveloperId = new Guid("3d4e5f6a-7b8c-9d0e-1f2a-3b4c5d6e7f8a"),
                            GenreId = 11,
                            ImageUrl = "https://stryda.gg/_next/image?url=https%3A%2F%2Fwww.datocms-assets.com%2F92583%2F1675777489-league-of-legends-cover.webp&w=1280&q=75",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2009, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "League of Legends"
                        },
                        new
                        {
                            Id = new Guid("07d121f2-1896-4397-a014-3f3b0dd5e55e"),
                            Description = "An open-world action RPG set in a detailed fantasy world.",
                            DeveloperId = new Guid("4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b"),
                            GenreId = 3,
                            ImageUrl = "https://fs-prod-cdn.nintendo-europe.com/media/images/10_share_images/games_15/nintendo_switch_4/H2x1_NSwitch_TheElderScrollsVSkyrim_image1600w.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2011, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Elder Scrolls V: Skyrim"
                        },
                        new
                        {
                            Id = new Guid("2b5cb595-19b5-445d-9f45-b6189687f483"),
                            Description = "A challenging and intricate action RPG known for its difficulty.",
                            DeveloperId = new Guid("5f6a7b8c-9d0e-1f2a-3b4c-5d6e7f8a9b0c"),
                            GenreId = 3,
                            ImageUrl = "https://image.api.playstation.com/cdn/EP0700/CUSA03365_00/OFMeAw2KhrdaEZAjW1f3tCIXbogkLpTC.png",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2016, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dark Souls III"
                        },
                        new
                        {
                            Id = new Guid("6de757b8-ee9d-4347-9845-a2c95c295749"),
                            Description = "An action RPG set in ancient Greece, part of the Assassin's Creed series.",
                            DeveloperId = new Guid("6a7b8c9d-0e1f-2a3b-4c5d-6e7f8a9b0c1d"),
                            GenreId = 3,
                            ImageUrl = "https://image.api.playstation.com/cdn/EP0001/CUSA09303_00/tzKcptCCUkiigpacybO8xWmvxPS7vIzk.png",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2018, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Assassin's Creed Odyssey"
                        },
                        new
                        {
                            Id = new Guid("e15f1653-b0ef-4512-969c-1b3b6594251e"),
                            Description = "A popular MOBA game known for its strategic depth and complexity.",
                            DeveloperId = new Guid("7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e"),
                            GenreId = 11,
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota2_social.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2013, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dota 2"
                        },
                        new
                        {
                            Id = new Guid("56b33636-b50f-4c0f-940a-8f361428b330"),
                            Description = "A fantasy RPG with an emphasis on fast-paced action and character-driven storytelling.",
                            DeveloperId = new Guid("8c9d0e1f-2a3b-4c5d-6e7f-8a9b0c1d2e3f"),
                            GenreId = 3,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/5/5a/FF_XV_cover_art.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2016, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final Fantasy XV"
                        },
                        new
                        {
                            Id = new Guid("653964dc-2cbd-4ba7-96dd-a5ebc0f59508"),
                            Description = "A team-based multiplayer first-person shooter with a wide range of unique heroes.",
                            DeveloperId = new Guid("9d0e1f2a-3b4c-5d6e-7f8a-9b0c1d2e3f4a"),
                            GenreId = 9,
                            ImageUrl = "https://blz-contentstack-images.akamaized.net/v3/assets/blt2477dcaf4ebd440c/bltdabc3782553659f1/650cc84db1e5551677dcd71d/ow2_xboxshowcase_static_7.png?format=webply&quality=90",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2016, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Overwatch"
                        },
                        new
                        {
                            Id = new Guid("94640685-0e93-47aa-81aa-ff19991dc088"),
                            Description = "An action-adventure game set in a fictional state, featuring an open world and a story-driven campaign.",
                            DeveloperId = new Guid("0e1f2a3b-4c5d-6e7f-8a9b-0c1d2e3f4a5b"),
                            GenreId = 2,
                            ImageUrl = "https://cdn.akamai.steamstatic.com/steam/apps/271590/capsule_616x353.jpg?t=1695060909",
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2013, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Grand Theft Auto V"
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("32bb0d8c-9d51-400b-b4a8-e3f8fe704af0"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("32bb0d8c-9d51-400b-b4a8-e3f8fe704af0"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("32bb0d8c-9d51-400b-b4a8-e3f8fe704af0"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("006ac6dc-26d9-4524-a5d1-ed1f4a1b6a04"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("006ac6dc-26d9-4524-a5d1-ed1f4a1b6a04"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("006ac6dc-26d9-4524-a5d1-ed1f4a1b6a04"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("1a7db5c2-a562-4828-bc20-84c6021a5623"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("07d121f2-1896-4397-a014-3f3b0dd5e55e"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("07d121f2-1896-4397-a014-3f3b0dd5e55e"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("07d121f2-1896-4397-a014-3f3b0dd5e55e"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("2b5cb595-19b5-445d-9f45-b6189687f483"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("2b5cb595-19b5-445d-9f45-b6189687f483"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("2b5cb595-19b5-445d-9f45-b6189687f483"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("6de757b8-ee9d-4347-9845-a2c95c295749"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("6de757b8-ee9d-4347-9845-a2c95c295749"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("6de757b8-ee9d-4347-9845-a2c95c295749"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("e15f1653-b0ef-4512-969c-1b3b6594251e"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("56b33636-b50f-4c0f-940a-8f361428b330"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("56b33636-b50f-4c0f-940a-8f361428b330"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("56b33636-b50f-4c0f-940a-8f361428b330"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("653964dc-2cbd-4ba7-96dd-a5ebc0f59508"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("653964dc-2cbd-4ba7-96dd-a5ebc0f59508"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("653964dc-2cbd-4ba7-96dd-a5ebc0f59508"),
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = new Guid("94640685-0e93-47aa-81aa-ff19991dc088"),
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = new Guid("94640685-0e93-47aa-81aa-ff19991dc088"),
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = new Guid("94640685-0e93-47aa-81aa-ff19991dc088"),
                            PlatformId = 3
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Games emphasizing physical challenges, including hand–eye coordination and reaction time.",
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Games focusing on exploration, puzzle-solving, and narrative.",
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Games where players assume the roles of characters in a fictional setting.",
                            IsDeleted = false,
                            Name = "RPG (Role-Playing Game)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Games designed to simulate real-world activities.",
                            IsDeleted = false,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Games where the focus is on strategic decision making.",
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Games that simulate the playing of sports.",
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Games that involve racing against opponents.",
                            IsDeleted = false,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Games centered around close-ranged combat between a limited number of characters.",
                            IsDeleted = false,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Games focusing on combat with various firearms.",
                            IsDeleted = false,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Online games capable of supporting large numbers of players simultaneously.",
                            IsDeleted = false,
                            Name = "MMO (Massively Multiplayer Online)"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Games featuring two opposing teams competing against each other.",
                            IsDeleted = false,
                            Name = "MOBA (Multiplayer Online Battle Arena)"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Games designed to scare the player with an ominous atmosphere and chilling storylines.",
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Games that challenge the player's problem-solving skills.",
                            IsDeleted = false,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Games that challenge the player's sense of rhythm and music timing.",
                            IsDeleted = false,
                            Name = "Music/Rhythm"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Games with an educational component, often aimed at younger players.",
                            IsDeleted = false,
                            Name = "Educational"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Games focusing on jumping and climbing through levels with uneven terrain.",
                            IsDeleted = false,
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Games where players often engage in gameplay focused on stealth and not being seen.",
                            IsDeleted = false,
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Games focusing on survival of the player as a primary goal.",
                            IsDeleted = false,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Games designed to be played using virtual reality equipment.",
                            IsDeleted = false,
                            Name = "VR (Virtual Reality)"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Games that blend the real-world environment with game elements.",
                            IsDeleted = false,
                            Name = "AR (Augmented Reality)"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Games produced by individual developers or small teams without substantial financial backing.",
                            IsDeleted = false,
                            Name = "Indie"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Games that allow a high degree of player freedom with minimal limitations.",
                            IsDeleted = false,
                            Name = "Sandbox"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Games featuring large numbers of players competing to be the last person standing.",
                            IsDeleted = false,
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.ModeratorCommunity", b =>
                {
                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ModeratorId", "CommunityId");

                    b.HasIndex("CommunityId");

                    b.ToTable("ModeratorsCommunities");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Games available for personal computers.",
                            IsDeleted = false,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Games available for PlayStation consoles.",
                            IsDeleted = false,
                            Name = "PlayStation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Games available for Xbox consoles.",
                            IsDeleted = false,
                            Name = "Xbox"
                        });
                });

            modelBuilder.Entity("FrostArc.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FrostArc.Data.Models.PostReaction", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Dislike")
                        .HasColumnType("bit");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsReactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserCommunity", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Community", null)
                        .WithMany()
                        .HasForeignKey("CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FrostArc.Data.Models.Comment", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Community", b =>
                {
                    b.HasOne("FrostArc.Data.Models.ApplicationUser", "Owner")
                        .WithMany("OwnedCommunities")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Game", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FrostArc.Data.Models.GamePlatform", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("FrostArc.Data.Models.ModeratorCommunity", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Post", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FrostArc.Data.Models.PostReaction", b =>
                {
                    b.HasOne("FrostArc.Data.Models.Post", "Post")
                        .WithMany("PostReactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FrostArc.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FrostArc.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrostArc.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FrostArc.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FrostArc.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OwnedCommunities");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Community", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Developer", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Game", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Genre", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("FrostArc.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostReactions");
                });
#pragma warning restore 612, 618
        }
    }
}
